"""
Django settings for plataforma project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path                                    # Importa a classe Path do módulo pathlib, que facilita a manipulação de caminhos de arquivos e diretórios.
from django.utils.translation import gettext_lazy as _      # Importa a função gettext_lazy do Django, renomeando-a como '_', para facilitar a tradução de strings de forma preguiçosa (lazy). A tradução só será avaliada quando a string for realmente utilizada, algo útil quando a tradução pode depender do estado atual da aplicação.
import os                                                   # Módulo para manipular caminhos de arquivos de forma independente do sistema operativo usado

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#41)0v#%ndo&lb)m^+az&vqb4_u-9zmykc^re&f=+grx+@@)ot'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'modeltranslation',                 # Regista o modeltranslation antes do .admin para evitar bugs relacionados com a tradução de modelos.
    'django.contrib.admin',             # Permite a gestão de dados através da interface de administração do Django.
    'django.contrib.auth',              # Fornece funcionalidades para autenticação de utilizadores.
    'django.contrib.contenttypes',      # Permite o uso de tipos de conteúdo, essencial para o sistema de permissões do Django.
    'django.contrib.sessions',          # legacy # Permite a gestão de sessões, armazenando dados temporários no servidor para cada utilizador.
    'django.contrib.messages',          # Permite exibir mensagens de notificação aos utilizadores.
    'django.contrib.staticfiles',       # Permite a gestão de ficheiros estáticos, como CSS, JavaScript e imagens.
    'core',                             # Regista a aplicação 'core' que criei.
    'plataforma',
    #"core.apps.PollsConfig"            # Pode ser usado para registar uma configuração de aplicação personalizada, se necessário.

    'rosetta',                          # Permite a tradução de strings diretamente na interface de administração.
    'ckeditor',                         # Integra o CKEditor, um editor de texto rico, na aplicação Django.
    'ckeditor_uploader',                # Permite o upload de ficheiros através do CKEditor.
    'import_export',                    # Permite importar e exportar ficheiros Excel
    'reversion',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  ############## Talvez faltasse este middleware. Permitia ao django usar o request.LANGUAGE_CODE e determinar automaticamente o idioma da interface
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'core.middleware.CustomLocaleMiddleware',         ########### middleware personalizado que adicionei no middleware.py
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


]

ROOT_URLCONF = 'plataforma.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [os.path.join(BASE_DIR, 'templates')],                         ######## # Adiciona a pasta templates
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'plataforma.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

##DataBase que vinha com o django
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

# Configuração da base de dados
DATABASES = {
    "default": {                                    # Configuração da base de dados padrão da aplicação.
        "ENGINE": "django.db.backends.postgresql",  # Especifica o backend da base de dados a ser utilizada, neste caso, o PostgreSQL.
        "NAME": "dev1",                             # Nome da base de dados
        "USER": "jcsm",                             # Nome do utilizador que tem acesso à base de dados.
        "PASSWORD": "pass_jcsm",                    # Password do utilizador para autenticação na base de dados.
        "HOST": "localhost",                        # Endereço do servidor onde a base de dados está alojada.
        "PORT": "5432",                             # Porto no qual o servidor da base de dados está a escutar (5432 é o padrão do PostgreSQL).
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

##### Configurações de autenticação
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend padrão
]

######
# URL para redirecionar após o login bem-sucedido
LOGIN_REDIRECT_URL = 'home'  # Substitua 'home' pela sua URL de redirecionamento desejada

# URL para redirecionar após o logout
LOGOUT_REDIRECT_URL = 'login'  # Substitua 'login' pela sua URL de redirecionamento desejada após logout
#######

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en'         # Código do idioma padrão da aplicação.

TIME_ZONE = 'Europe/Lisbon'     # Fuso horário da aplicação.

USE_I18N = True                 # Ativa a internacionalização na aplicação.

USE_TZ = True                   # Ativa o suporte de fusos horários.

################# Adiciona a configuração de tradução
LOCALE_PATHS = [
    BASE_DIR / 'locale',  # Ajuste conforme necessário
]
# Lista de idiomas (comentados os que não estão a ser usados)
LANGUAGES = [
    ('en', _('English')),
    ('pt', _('Portuguese')),
    ('pt-br', _('Brazilian Portuguese')),
    ('es', _('Spanish')),
    # ('fr', _('Francês')),
    # ('de', _('Alemão')),
    # ('it', _('Italiano')),
    # ('ru', _('Russo')),
    # ('zh-hans', _('Chinês Simplificado')),
    # ('ja', _('Japonês')),
    # ('ar', _('Árabe')),
    # ('nl', _('Neerlandês')),
    # ('pl', _('Polaco')),
    # ('tr', _('Turco')),
    # ('ko', _('Coreano')),
    # ('sv', _('Sueco')),
    # ('da', _('Dinamarquês')),
    # ('fi', _('Finlandês')),
    # ('no', _('Norueguês')),
    # ('cs', _('Checo')),
    # ('hu', _('Húngaro')),
    
]
#Idiomas para o Model translate, uma vez que havia conflito com o django por causa do name_pt-br/name_pt_br
#MODELTRANSLATION_LANGUAGES = ('en', 'pt', 'pt_br', 'es')
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

                                #################adicionei
STATICFILES_DIRS = [
    BASE_DIR / "plataforma/static/core",  # Adjust this path as necessary
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # Define o tipo de campo automático padrão para as primary keys como BigAutoField, que suporta valores maiores.

# Adiciona a configuração para que o Django reconheça o modelo de utilizador personalizado,
#AUTH_USER_MODEL = 'core.User'

#Tentar resolver o erro do painel admin não dar para fazer login. (A soluçao foi criar um novo superuser depois de ter personalizado o modelo User do django)
#AUTHENTICATION_BACKENDS = [
#    'django.contrib.auth.backends.ModelBackend',  # O backend padrão
#]

CKEDITOR_UPLOAD_PATH = "uploads/"                       # Define o diretório onde os arquivos enviados pelo CKEditor serão armazenados (texto e imagens)

LOGIN_REDIRECT_URL = "home"                                # Redireciona o user após login para a homepage
LOGOUT_REDIRECT_URL = "home"                               # Redireciona o user após logout para a homepage

from import_export.formats.base_formats import CSV, XLSX, JSON, YAML, HTML
IMPORT_FORMATS = [CSV, XLSX]
EXPORT_FORMATS = [CSV, XLSX, JSON, YAML, HTML]