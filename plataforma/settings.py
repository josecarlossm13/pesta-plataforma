"""
Django settings for plataforma project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path                                    # Importa a classe Path do módulo pathlib, que facilita a manipulação de caminhos de arquivos e diretórios.
from django.utils.translation import gettext_lazy as _      # Importa a função gettext_lazy do Django, renomeando-a como '_', para facilitar a tradução de strings de forma preguiçosa (lazy). A tradução só será avaliada quando a string for realmente utilizada, algo útil quando a tradução pode depender do estado atual da aplicação.
import os                                                   # Módulo para manipular caminhos de arquivos de forma independente do sistema operativo usado
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

## ADicionei para deploy###
import dj_database_url
import os
# Em desenvolvimento local, usa o .env
# Em produção (Railway/Heroku), as variáveis já estão no ambiente
dotenv_path = BASE_DIR / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
############################
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "dev-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False") == "True"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")

#ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# CSRF_TRUSTED_ORIGINS = [
#     origin.strip() for origin in os.environ.get(
#         "CSRF_TRUSTED_ORIGINS",
#         "http://127.0.0.1:8000,http://localhost:8000"
#     ).split(",")
# ]

############################# para deploy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
######## adicionei para deploy####### Para evitar erros de CSRF em produção###
CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",")
#############################################################################

# Application definition
INSTALLED_APPS = [
    'modeltranslation',                 # Regista o modeltranslation antes do .admin para evitar bugs relacionados com a tradução de modelos.
    'django.contrib.admin',             # Permite a gestão de dados através da interface de administração do Django.
    'django.contrib.auth',              # Fornece funcionalidades para autenticação de utilizadores.
    'django.contrib.contenttypes',      # Permite o uso de tipos de conteúdo, essencial para o sistema de permissões do Django.
    'django.contrib.sessions',          # legacy # Permite a gestão de sessões, armazenando dados temporários no servidor para cada utilizador.
    'django.contrib.sites',             # Necessário para django-allauth
    'django.contrib.messages',          # Permite exibir mensagens de notificação aos utilizadores.
    'django.contrib.staticfiles',       # Permite a gestão de ficheiros estáticos, como CSS, JavaScript e imagens.

    'accounts',
    'allauth',
    'allauth.account',

    'core',                             # Regista a aplicação 'core' que criei.
    'plataforma',

    'rosetta',                          # Permite a tradução de strings diretamente na interface de administração.
    'ckeditor',                         # Integra o CKEditor, um editor de texto rico, na aplicação Django.
    'ckeditor_uploader',                # Permite o upload de ficheiros através do CKEditor.
    'import_export',                    # Permite importar e exportar ficheiros Excel
    'reversion',
    'crispy_forms',
    'crispy_bootstrap5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    #### adicionado para deploy###
    'whitenoise.middleware.WhiteNoiseMiddleware',
    #############################
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',                # Talvez faltasse este middleware. Permitia ao django usar o request.LANGUAGE_CODE e determinar automaticamente o idioma da interface
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'allauth.account.middleware.AccountMiddleware',             # django allauth

]

ROOT_URLCONF = 'plataforma.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [os.path.join(BASE_DIR, 'templates')],                         ######## # Adiciona a pasta templates
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.areas_dropdown',                       # mostrar o menu de áreas em qualquer página
                'core.context_processors.user_permissions',                     # verificar se o user é admin, gestor ou superuser
            ],
        },
    },
]

WSGI_APPLICATION = 'plataforma.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

##DataBase que vinha com o django
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

# Configuração da base de dados

DATABASES = {
    "default": dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",  # fallback local
        conn_max_age=600,
        ssl_require=os.environ.get("DB_SSL_REQUIRE", "False") == "True",
    )
}

# DATABASES = {
#     "default": {                                    # Configuração da base de dados padrão da aplicação.
#         "ENGINE": "django.db.backends.postgresql",  # Especifica o backend da base de dados a ser utilizada, neste caso, o PostgreSQL.
#         "NAME": "dev1",                             # Nome da base de dados
#         "USER": "jcsm",                             # Nome do utilizador que tem acesso à base de dados.
#         "PASSWORD": "pass_jcsm",                    # Password do utilizador para autenticação na base de dados.
#         "HOST": "localhost",                        # Endereço do servidor onde a base de dados está alojada.
#         "PORT": "5432",                             # Porto no qual o servidor da base de dados está a escutar (5432 é o padrão do PostgreSQL).
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

##### Configurações de autenticação
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend padrão
    'allauth.account.auth_backends.AuthenticationBackend',      # `allauth` specific authentication methods, such as login by email

]
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en'         # Código do idioma padrão da aplicação.

TIME_ZONE = 'Europe/Lisbon'     # Fuso horário da aplicação.

USE_I18N = True                 # Ativa a internacionalização na aplicação.

USE_TZ = True                   # Ativa o suporte de fusos horários.

################# Adiciona a configuração de tradução
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]
# Lista de idiomas
LANGUAGES = [
    ('en', _('English')),
    ('pt', _('Portuguese')),
    ('pt-br', _('Brazilian Portuguese')),
    ('es', _('Spanish')),
# Restantes idiomas sem tradução personalizada na UI do site (ordenados por nome do idioma em inglês)
    ('sq',     _('Albanian')),
    ('ar',     _('Arabic')),
    ('hy',     _('Armenian')),
    ('bs',     _('Bosnian')),
    ('bg',     _('Bulgarian')),
    ('zh-hans',_('Chinese (Simplified)')),
    ('hr',     _('Croatian')),
    ('da',     _('Danish')),
    ('nl',     _('Dutch')),
    ('et',     _('Estonian')),
    ('fi',     _('Finnish')),
    ('fr',     _('French')),
    ('de',     _('German')),
    ('ka',     _('Georgian')),
    ('el',     _('Greek')),
    ('hu',     _('Hungarian')),
    ('is',     _('Icelandic')),
    ('ga',     _('Irish')),
    ('it',     _('Italian')),
    ('ja',     _('Japanese')),
    ('ko',     _('Korean')),
    ('lv',     _('Latvian')),
    ('lt',     _('Lithuanian')),
    ('mk',     _('Macedonian')),
    ('nb',     _('Norwegian')),          # usar 'nb' (Bokmål)
    ('pl',     _('Polish')),
    ('ro',     _('Romanian')),
    ('ru',     _('Russian')),
    ('sr',     _('Serbian')),            # A usar Cirílico. Também existe 'sr-latn' para sérvio (latim)
    ('sk',     _('Slovak')),
    ('sl',     _('Slovenian')),
    ('sv',     _('Swedish')),
    ('tr',     _('Turkish')),
    ('uk',     _('Ukrainian')),
]

#Idiomas para o Model translate, uma vez que havia conflito com o django por causa do name_pt-br/name_pt_br
#MODELTRANSLATION_LANGUAGES = ('en', 'pt', 'pt_br', 'es')
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'

# Caso o campo do idioma selecionado esteja vazio, impede qualquer fallback para o idioma padrão
MODELTRANSLATION_FALLBACK_LANGUAGES = {
    'default': ()
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# STATICFILES_DIRS = [
#     BASE_DIR / "plataforma/static/core",
# ]

###### Adicionei para deploy##########
#STATIC_ROOT = BASE_DIR / 'staticfiles'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Otimizar ficheiros estáticos no deploy
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
######################################

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # Define o tipo de campo automático padrão para as primary keys como BigAutoField, que suporta valores maiores.



CKEDITOR_UPLOAD_PATH = "uploads/ckeditor/"              # Define o diretório onde os arquivos enviados pelo CKEditor serão armazenados (texto e imagens)

# Ativa o botão de imagem etc. com upload direto no CKEditor
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': [
            {'name': 'document', 'items': ['Source']},
            {'name': 'styles', 'items': ['Format', 'Font', 'FontSize']},
            {'name': 'basicstyles', 'items': ['Bold', 'Italic', 'Underline', 'RemoveFormat']},
            {'name': 'paragraph', 'items': [
                'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-',
                'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'
            ]},
            {'name': 'insert', 'items': ['Image', 'Table', 'HorizontalRule']},
            {'name': 'links', 'items': ['Link', 'Unlink']},
            {'name': 'clipboard', 'items': ['Undo', 'Redo']},
            # barra de cores
            {'name': 'colors', 'items': ['TextColor', 'BGColor']},
        ],
        'height': 400,
        'width': '100%',
        # Plugins extra
        'extraPlugins': 'uploadimage,justify,image2,colorbutton,colordialog,font',
        'filebrowserUploadUrl': '/ckeditor/upload/',
        'filebrowserBrowseUrl': '/ckeditor/browse/',
        'removePlugins': 'image',  # mantem o image2
        # Permitir estilos de cor e marcador
        'extraAllowedContent': 'span{color,background-color}[style];*(*);*{*}',
    }
}


from import_export.formats.base_formats import CSV, XLSX, JSON, YAML, HTML
IMPORT_FORMATS = [CSV, XLSX]
EXPORT_FORMATS = [CSV, XLSX, JSON, YAML, HTML]

# Configuraçoes django-allauth
ACCOUNT_CONFIRM_EMAIL_ON_GET = True     # ao abrir o link no browser, marca logo o email como verificado

SITE_ID = 1

LOGIN_REDIRECT_URL = '/'                # Redireciona o user após login para a homepage
ACCOUNT_LOGOUT_REDIRECT_URL = '/'       # Redireciona o user após logout para a homepage

# aponta para o adapter para redirecionar para account panel após clicar no botão change password
ACCOUNT_ADAPTER = "accounts.adapters.AccountAdapter"

# Nova API: campos permitidos no registo
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']

# Verificação de email obrigatória
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Formulário personalizado para signup
ACCOUNT_SIGNUP_FORM_CLASS = 'accounts.forms.CustomSignupForm'

# Impede users de conseguir adicionar outro email ou substituir. Staff pode através do painel admin
ACCOUNT_MAX_EMAIL_ADDRESSES = 1

# forçar funcionamento esperado da checkbox "remember me" ao fazer login
SESSION_EXPIRE_AT_BROWSER_CLOSE = True          # Fecha a sessão ao fechar o browser por padrão

# Mostra a checkbox "remember me" e deixa-a controlar se a sessão expirou
# None => mostra checkbox; True => lembra-se sempre do login; False => nunca se lembra do login
ACCOUNT_SESSION_REMEMBER = None

# Config django-crispy-forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

#####################################################
##################APAGAR!!!!!!!!!!!!!!!!!!############ Foi para simular os emails enviados
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Email: usa o que vier do ambiente; se nada estiver definido e estiver em DEBUG, usa console
EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND",
    "django.core.mail.backends.console.EmailBackend" if DEBUG else "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = os.environ.get("EMAIL_HOST",'smtp.gmail.com')
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER",'yoorusername@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD",'key') #past the key or password app here
EMAIL_PORT = os.environ.get("EMAIL_PORT",587)
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS",True)
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL",'default from email')

import certifi
os.environ['SSL_CERT_FILE'] = certifi.where()
